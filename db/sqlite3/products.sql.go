// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: products.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  title, description, amount
) VALUES (
  ?, ?, ?
)
RETURNING title, description, amount, created_at, updated_at, id
`

type CreateProductParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Amount      string `json:"amount"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.queryRow(ctx, q.createProductStmt, createProduct, arg.Title, arg.Description, arg.Amount)
	var i Product
	err := row.Scan(
		&i.Title,
		&i.Description,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteProductStmt, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT title, description, amount, created_at, updated_at, id FROM products
WHERE id = ? LIMIT 1
`

// products
func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.queryRow(ctx, q.getProductStmt, getProduct, id)
	var i Product
	err := row.Scan(
		&i.Title,
		&i.Description,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT title, description, amount, created_at, updated_at, id FROM products
ORDER BY productame
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.query(ctx, q.listProductsStmt, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.Title,
			&i.Description,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET 
title = ?,
description = ?,
amount = ?
WHERE id = ?
`

type UpdateProductParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Amount      string `json:"amount"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.exec(ctx, q.updateProductStmt, updateProduct,
		arg.Title,
		arg.Description,
		arg.Amount,
		arg.ID,
	)
	return err
}
